buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${mod_version}"
group = "tictim.${mod_id}"
archivesBaseName = "${mod_name}-1.18.2"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    main {
        resources { srcDir 'src/generated/resources' }
    }

    datagen {
        java { srcDir "src/datagen/java" }
        resources { srcDir "src/datagen/resources" }

        compileClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

minecraft {
    mappings channel: 'parchment', version: '2022.03.13-1.18.2'
    // makeObfSourceJar = false

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            mods {
                paraglider {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            ideaModule "${project.name}.main"

            mods {
                paraglider {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'paraglider', '--all', '--output', file('src/generated/resources/')
            ideaModule "${project.name}.main"

            mods {
                paraglider {
                    source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "paraglider.refmap.json"
    showMessageTypes = true
}

repositories {
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.18.2-40.0.40"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-1.18.2-common-api:10.2.1.1002"))
    compileOnly(fg.deobf("mezz.jei:jei-1.18.2-forge-api:10.2.1.1002"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-1.18.2-forge:10.2.1.1002"))
}

java {
    withSourcesJar()
}


jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Tictim",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : "tictim.${mod_id}",
                "Implementation-Vendor"   : "Tictim",
                "Implementation-Version"  : "${version}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"          : "tictim.paraglider.MixinConnector"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
publishing {
    publications {
        create("maven", MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
}
